Starting Deno language server...
{"type":"mark","name":"lsp.initialize","count":1,"args":{"processId":89926,"rootPath":"/Users/bobby/dev/repos/dev-contracts/tools/dev-contracts-spec","rootUri":"file:///Users/bobby/dev/repos/dev-contracts/tools/dev-contracts-spec","initializationOptions":{"enable":null,"cacheOnSave":true,"disablePaths":[],"enablePaths":null,"path":null,"env":{},"envFile":null,"cache":null,"certificateStores":null,"codeLens":{"implementations":true,"references":true,"referencesAllFunctions":true,"test":true,"testArgs":["--allow-all","--no-check"]},"config":null,"documentPreloadLimit":1000,"future":false,"importMap":null,"inlayHints":{"parameterNames":{"enabled":"none","suppressWhenArgumentMatchesName":true},"parameterTypes":{"enabled":false},"variableTypes":{"enabled":false,"suppressWhenTypeMatchesName":true},"propertyDeclarationTypes":{"enabled":false},"functionLikeReturnTypes":{"enabled":false},"enumMemberValues":{"enabled":false}},"maxTsServerMemory":3072,"suggest":{"autoImports":true,"completeFunctionCalls":false,"names":true,"paths":true,"imports":{"autoDiscover":true,"hosts":{"https://deno.land":true}}},"trace":{"server":"off"},"testing":{"args":["--allow-all","--no-check"]},"tlsCertificate":null,"unsafelyIgnoreCertificateErrors":null,"unstable":true,"lint":true,"internalDebug":false,"internalInspect":false,"logFile":true,"defaultTaskCommand":"open","enableBuiltinCommands":true},"capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional","normalizesLineEndings":true,"changeAnnotationSupport":{"groupsOnLabel":true}},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true,"relativePatternSupport":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"tagSupport":{"valueSet":[1]},"resolveSupport":{"properties":["location.range"]}},"executeCommand":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true,"semanticTokens":{"refreshSupport":true},"codeLens":{"refreshSupport":true},"fileOperations":{"dynamicRegistration":true,"didCreate":true,"willCreate":true,"didRename":true,"willRename":true,"didDelete":true,"willDelete":true},"inlineValue":{"refreshSupport":true},"inlayHint":{"refreshSupport":true}},"textDocument":{"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]},"insertReplaceSupport":true,"resolveSupport":{"properties":["documentation","detail","additionalTextEdits"]},"insertTextModeSupport":{"valueSet":[1,2]},"labelDetailsSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true,"insertTextMode":2,"completionList":{"itemDefaults":["commitCharacters","editRange","insertTextFormat","insertTextMode"]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true},"activeParameterSupport":true},"contextSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true,"tagSupport":{"valueSet":[1]}},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"codeAction":{"dynamicRegistration":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}},"isPreferredSupport":true,"disabledSupport":true,"dataSupport":true,"resolveSupport":{"properties":["edit"]},"honorsChangeAnnotations":false},"codeLens":{"dynamicRegistration":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"colorProvider":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true,"prepareSupportDefaultBehavior":1,"honorsChangeAnnotations":true},"publishDiagnostics":{"relatedInformation":true,"tagSupport":{"valueSet":[1,2]},"versionSupport":false,"codeDescriptionSupport":true,"dataSupport":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true,"foldingRangeKind":{"valueSet":["comment","imports","region"]},"foldingRange":{"collapsedText":false}},"selectionRange":{"dynamicRegistration":true},"linkedEditingRange":{"dynamicRegistration":true},"callHierarchy":{"dynamicRegistration":true},"semanticTokens":{"dynamicRegistration":true,"requests":{"range":true,"full":{"delta":true}},"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"formats":["relative"],"overlappingTokenSupport":false,"multilineTokenSupport":false,"serverCancelSupport":true,"augmentsSyntaxTokens":true},"typeHierarchy":{"dynamicRegistration":true},"inlineValue":{"dynamicRegistration":true},"inlayHint":{"dynamicRegistration":true,"resolveSupport":{"properties":["tooltip","textEdits","label.tooltip","label.location","label.command"]}},"diagnostic":{"dynamicRegistration":true,"relatedDocumentSupport":false}},"notebookDocument":{"synchronization":{"dynamicRegistration":true}},"window":{"workDoneProgress":true,"showMessage":{"messageActionItem":{"additionalPropertiesSupport":true}},"showDocument":{"support":true}},"general":{"regularExpressions":{"engine":"ECMAScript","version":"ES2020"},"markdown":{"parser":"marked","version":"1.1.0"},"staleRequestSupport":{"cancel":true,"retryOnContentModified":["textDocument/semanticTokens/full","textDocument/semanticTokens/range","textDocument/semanticTokens/full/delta"]},"positionEncodings":["utf-16"]},"experimental":{"testingApi":true}},"trace":"off","workspaceFolders":[{"uri":"file:///Users/bobby/dev/repos/dev-contracts/tools/dev-contracts-spec","name":"dev-contracts-spec"}],"clientInfo":{"name":"Cursor","version":"1.96.2"},"locale":"en-us"}},
  version: 2.2.6 (release, aarch64-apple-darwin)
  executable: /opt/homebrew/bin/deno
Connected to "Cursor" 1.96.2
{"type":"measure","name":"lsp.initialize","count":1,"duration":0.139},
{"type":"mark","name":"lsp.update_global_cache"},
Enabling import suggestions for: https://deno.land
{"type":"measure","name":"lsp.update_global_cache","count":1,"duration":2.362},
Refreshing configuration tree...
  Resolved Deno configuration file: "file:///Users/bobby/dev/repos/dev-contracts/tools/dev-contracts-spec/deno.json"
  Resolved lockfile: "file:///Users/bobby/dev/repos/dev-contracts/tools/dev-contracts-spec/deno.lock"
{"type":"mark","name":"lsp.update_cache"},
{"type":"measure","name":"lsp.update_cache","count":1,"duration":0.002},
Server ready.
{"type":"mark","name":"lsp.did_open","count":1,"args":{"textDocument":{"uri":"file:///Users/bobby/dev/repos/dev-contracts/tools/dev-contracts-spec/src/schemas/contracts_toml.ts","languageId":"typescript","version":1,"text":"import { z } from \"zod\";\nimport { type Ref, RefSchema } from \"./common.ts\";\n\n/** The definition of a task (command string). */\nexport type TaskDefinition = string;\n\n/**\n * Schema for a single task definition within a contract.\n * Simplified to just a command string.\n */\nexport const TaskDefinitionSchema: z.ZodType<TaskDefinition> = z.string();\n\n/** A single contract entry definition. */\nexport type ContractEntry = {\n  ref: Ref;\n  description: string;\n};\n\n/**\n * Schema for a single contract definition within `contracts.toml`.\n * Includes the reference and a description.\n */\nexport const ContractEntrySchema: z.ZodType<ContractEntry> = z.object({\n  ref: RefSchema.describe(\n    \"Reference (URL or path) to the contract definition.\",\n  ),\n  description: z.string().describe(\"A brief description of the contract.\"),\n}).strict();\n\n/** Represents the parsed content of a `contracts.toml` file. */\nexport type Contract = {\n  schemaVersion: 1;\n  metadata: Record<string, unknown>;\n  contracts: Record<string, ContractEntry>;\n};\n\n/**\n * Main schema for the `contracts.toml` file.\n * Includes schema version, metadata, and the contracts map.\n */\nexport const ContractSchema: z.ZodType<Contract> = z.object({\n  schemaVersion: z.literal(1).describe(\n    \"The version of the contracts.toml schema.\",\n  ),\n  metadata: z.record(z.string(), z.unknown()).describe(\n    \"Arbitrary key-value metadata for the project.\",\n  ),\n  contracts: z.record(ContractEntrySchema)\n    .describe(\"Definitions of individual contracts.\"),\n}).strict();\n"}}},
{"type":"measure","name":"lsp.did_open","count":1,"duration":0.898},
{"type":"mark","name":"lsp.update_diagnostics_deps"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.update_diagnostics_lint"},
{"type":"measure","name":"lsp.update_diagnostics_deps","count":1,"duration":0.375},
{"type":"measure","name":"lsp.testing_update","count":1,"duration":0.413},
{"type":"measure","name":"lsp.update_diagnostics_lint","count":1,"duration":3.134},
{"type":"mark","name":"lsp.did_open","count":2,"args":{"textDocument":{"uri":"file:///Users/bobby/dev/repos/dev-contracts/tools/dev-contracts-spec/src/schemas/contracts_toml.test.ts","languageId":"typescript","version":1,"text":"// import { Deno } from \"deno\"; // Removed unused import\nimport {\n  // assert, // Removed unused import\n  assertEquals,\n  assertThrows,\n} from \"jsr:@std/assert\";\nimport { z } from \"zod\";\nimport {\n  type Contract,\n  ContractEntrySchema,\n  ContractSchema,\n} from \"./contracts_toml.ts\";\n\nDeno.test(\"ContractSchema: Validates a minimal correct structure\", () => {\n  const validData: Contract = {\n    schemaVersion: 1,\n    metadata: { project: \"ExampleProj\", owner: \"Team A\" },\n    contracts: {\n      \"my-service\": {\n        ref: \"./service-contract.ts\",\n        description: \"Main service contract\",\n      },\n      \"another-contract\": {\n        ref: \"https://example.com/contract.json\",\n        description: \"External API contract\",\n      },\n    },\n  };\n\n  const parsed = ContractSchema.parse(validData);\n  assertEquals(parsed, validData); // Check if parsing returns the same structure\n});\n\nDeno.test(\"ContractSchema: Throws on invalid structure (missing ref)\", () => {\n  const invalidData = {\n    schemaVersion: 1,\n    metadata: {},\n    contracts: {\n      \"bad-service\": {\n        // ref is missing\n        description: \"This entry is missing ref\",\n      },\n    },\n  };\n\n  assertThrows(\n    () => ContractSchema.parse(invalidData),\n    z.ZodError,\n    \"Required\", // Expecting ZodError with message indicating 'ref' is required\n  );\n});\n\nDeno.test(\"ContractSchema: Throws on invalid structure (missing description)\", () => {\n  const invalidData = {\n    schemaVersion: 1,\n    metadata: {},\n    contracts: {\n      \"bad-service\": {\n        ref: \"./some-ref.json\",\n        // description is missing\n      },\n    },\n  };\n\n  assertThrows(\n    () => ContractSchema.parse(invalidData),\n    z.ZodError,\n    \"Required\",\n  );\n});\n\nDeno.test(\"ContractSchema: Throws on invalid structure (missing schemaVersion)\", () => {\n  const invalidData = {\n    // schemaVersion: 1, // Missing\n    metadata: {},\n    contracts: {\n      \"my-service\": {\n        ref: \"./service-contract.ts\",\n        description: \"Main service contract\",\n      },\n    },\n  };\n\n  assertThrows(\n    () => ContractSchema.parse(invalidData),\n    z.ZodError,\n    \"Invalid literal value, expected 1\",\n  );\n});\n\nDeno.test(\"ContractSchema: Throws on invalid structure (missing metadata)\", () => {\n  const invalidData = {\n    schemaVersion: 1,\n    // metadata: {}, // Missing\n    contracts: {\n      \"my-service\": {\n        ref: \"./service-contract.ts\",\n        description: \"Main service contract\",\n      },\n    },\n  };\n\n  assertThrows(\n    () => ContractSchema.parse(invalidData),\n    z.ZodError,\n    \"Required\",\n  );\n});\n\nDeno.test(\"ContractSchema: Throws on invalid structure (extra entry property due to strict)\", () => {\n  const invalidData = {\n    schemaVersion: 1,\n    metadata: {},\n    contracts: {\n      \"my-service\": {\n        ref: \"./service-contract.ts\",\n        description: \"Main service contract\",\n        extraField: \"should not be here\",\n      },\n    },\n  };\n\n  assertThrows(\n    () => ContractSchema.parse(invalidData),\n    z.ZodError,\n    \"Unrecognized key(s) in object: 'extraField'\", // Expecting ZodError about unrecognized keys\n  );\n});\n\nDeno.test(\"ContractSchema: Throws on invalid structure (extra top-level property due to strict)\", () => {\n  const invalidData = {\n    schemaVersion: 1,\n    metadata: {},\n    contracts: {\n      \"my-service\": {\n        ref: \"./service-contract.ts\",\n        description: \"Main service contract\",\n      },\n    },\n    otherStuff: \"not allowed\", // Violates ContractSchema.strict()\n  };\n\n  assertThrows(\n    () => ContractSchema.parse(invalidData),\n    z.ZodError,\n    \"Unrecognized key(s) in object: 'otherStuff'\",\n  );\n});\n\nDeno.test(\"ContractEntrySchema: Validates a correct structure\", () => {\n  const validData = {\n    ref: \"./path/to/contract.json\",\n    description: \"A test contract\",\n  };\n  const parsed = ContractEntrySchema.parse(validData);\n  assertEquals(parsed, validData);\n});\n\nDeno.test(\"ContractEntrySchema: Throws on missing ref\", () => {\n  const invalidData = { description: \"Missing ref\" };\n  assertThrows(\n    () => ContractEntrySchema.parse(invalidData),\n    z.ZodError,\n    \"Required\",\n  );\n});\n\nDeno.test(\"ContractEntrySchema: Throws on missing description\", () => {\n  const invalidData = { ref: \"./some-ref.json\" }; // description is missing\n  assertThrows(\n    () => ContractEntrySchema.parse(invalidData),\n    z.ZodError,\n    \"Required\",\n  );\n});\n\nDeno.test(\"ContractEntrySchema: Throws on non-string ref\", () => {\n  const invalidData = { ref: 123, description: \"Non-string ref\" };\n  assertThrows(\n    () => ContractEntrySchema.parse(invalidData),\n    z.ZodError,\n    \"Expected string, received number\",\n  );\n});\n\nDeno.test(\"ContractEntrySchema: Throws on non-string description\", () => {\n  const invalidData = { ref: \"./some-ref.json\", description: 999 }; // description is not a string\n  assertThrows(\n    () => ContractEntrySchema.parse(invalidData),\n    z.ZodError,\n    \"Expected string, received number\",\n  );\n});\n\nDeno.test(\"ContractEntrySchema: Throws on extra property due to strict\", () => {\n  const invalidData = {\n    ref: \"./path/to/contract.json\",\n    description: \"Test with extra prop\",\n    extra: \"not allowed\",\n  };\n  assertThrows(\n    () => ContractEntrySchema.parse(invalidData),\n    z.ZodError,\n    \"Unrecognized key(s) in object: 'extra'\",\n  );\n});\n"}}},
{"type":"measure","name":"lsp.did_open","count":2,"duration":0.722},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.update_diagnostics_deps"},
{"type":"mark","name":"lsp.update_diagnostics_lint"},
{"type":"measure","name":"lsp.testing_update","count":2,"duration":0.105},
{"type":"measure","name":"lsp.update_diagnostics_deps","count":2,"duration":0.977},
{"type":"measure","name":"lsp.update_diagnostics_lint","count":2,"duration":6.285},
{"type":"mark","name":"lsp.did_open","count":3,"args":{"textDocument":{"uri":"file:///Users/bobby/dev/repos/dev-contracts/tools/dev-contracts-spec/README.md","languageId":"markdown","version":1,"text":"# DevContracts Spec\n\nThis project defines and validates the Zod schemas used throughout the\n`DevContracts` framework.\n\n## Overview\n\n`dev-contracts-spec` is a core component of the larger `DevContracts` project.\nIts primary responsibility _at this stage_ is to provide the canonical Zod type\ndefinitions that represent the structure and constraints of the `contracts.toml`\nspecification, drawing inspiration from well-established configuration schemas\nlike ESLint's `.eslintrc`.\n\nThink of this repository as the declarative schema specification for the core\n`DevContracts` configuration. It ensures that the types used by other tools\nwithin the framework are consistent, correct, and valid according to Zod's\nrules. While future iterations may expand the scope, the current focus is solely\non these foundational Zod types.\n\n## Purpose\n\nThe primary goals of this project _currently_ are to:\n\n1. **Define:** Provide clear, reusable Zod schemas for the `contracts.toml` data\n   structure and related artifacts.\n2. **Validate:** Ensure that these Zod schemas themselves are valid, correctly\n   defined, and pass Deno's type checking (`deno check`).\n\nThis project **does not** contain runtime logic for interacting with specific\n`contracts.toml` files or validating actual project states against a contract.\nThat functionality resides in other tools within the `DevContracts` ecosystem.\nThis project focuses strictly on the **type definitions** themselves.\n\n## Usage\n\nThe Zod schemas defined here are intended to be imported and utilized by other\ntools within the `DevContracts` framework (e.g., validation scripts, code\ngenerators, schema bridge tools) to ensure type safety and consistency when\nprocessing contract-related data.\n\n## Project Structure\n\n```\n.\n├── .gitignore\n├── deno.jsonc                 # Deno configuration (tasks, lint, fmt, check)\n├── import_map.json            # Dependency management\n├── README.md                  # This file\n├── src/\n│   ├── schemas/             # Zod schema definitions\n│   │   └── README.md        # Schema organization details/questions\n│   └── mod.ts               # Main module entrypoint\n├── examples/                  # Example data (valid/invalid)\n└── ... (test files will live alongside source files)\n```\n\n- **`deno.jsonc`**: Defines standard Deno tasks (`fmt`, `lint`, `test`,\n  `check`), compiler options, and points to the `import_map.json`.\n- **`import_map.json`**: Manages external dependencies (like Zod).\n- **`src/schemas/`**: Contains all Zod schema definitions. See the `README.md`\n  within this directory for organization details.\n- **`src/mod.ts`**: Exports the public API (the schemas) of this package.\n- **`examples/`**: Will contain example data structures that conform to (or\n  intentionally violate) the defined schemas, useful for testing and\n  documentation.\n- **Tests**: Test files (e.g., `foo.test.ts`) reside next to the source files\n  they are testing (e.g., `foo.ts`), following Deno conventions.\n\n## Development Workflow\n\nThis project emphasizes a strict, iterative development process:\n\n1. **Define/Refine Schema**: Add or modify Zod schemas in `src/schemas/`.\n2. **Add Examples**: Create corresponding valid and invalid examples in\n   `examples/`.\n3. **Write Tests**: Create/update tests (`*.test.ts`) to validate the schema\n   against the examples and cover edge cases.\n4. **Run Checks**: Use Deno tasks to ensure quality:\n   - `deno task fmt`: Format code.\n   - `deno task lint`: Lint code for potential issues.\n   - `deno task check`: Perform type checking.\n   - `deno task test`: Run all tests.\n5. **Fix & Iterate**: Address any issues found during checks or testing.\n6. **Document**: Update TSDoc comments and relevant `README.md` files.\n\nAlways aim to leave the project in a working state after each iteration.\n\n## Debugging\n\nDeno utilizes the V8 Inspector Protocol, allowing debugging with tools like\nChrome DevTools, Edge DevTools, and IDEs (VSCode, JetBrains).\n\nTo enable debugging, use one of the following flags when running a Deno script:\n\n- **`--inspect`**: Starts the Deno process with the debugger server active. The\n  script begins execution immediately. You can connect a debugger client (like\n  Chrome DevTools via `chrome://inspect`) at any time. Best for long-running\n  processes.\n  ```bash\n  deno run --inspect your_script.ts\n  ```\n- **`--inspect-wait`**: Similar to `--inspect`, but Deno waits for the debugger\n  client to connect _before_ executing any script code. Useful for debugging\n  startup logic or short scripts where you need to connect before execution\n  finishes.\n  ```bash\n  deno run --inspect-wait your_script.ts\n  ```\n- **`--inspect-brk`**: Waits for the debugger client to connect and then pauses\n  execution on the very first line of code. This is often the most useful flag\n  as it allows you to set breakpoints before any application code runs. IDEs\n  often use this by default.\n  ```bash\n  deno run --inspect-brk your_script.ts\n  ```\n\n**Connecting with Chrome DevTools:**\n\n1. Run your script with one of the `--inspect` flags (e.g.,\n   `deno run --inspect-brk main.ts`).\n2. Open Chrome or Edge and navigate to `chrome://inspect`.\n3. Your Deno process should appear under \"Remote Target\". Click \"inspect\".\n4. The DevTools will open, allowing you to set breakpoints, step through code,\n   inspect variables, etc.\n\n**IDE Integration:**\n\n- **VSCode:** Use the official `vscode_deno` extension for seamless debugging\n  integration.\n- **JetBrains IDEs (WebStorm, IntelliJ, etc.):** Use the Deno plugin. You can\n  typically right-click a file and select \"Debug 'Deno: <filename>'\".\n\n**Additional Debugging Flags:**\n\n- `--log-level=debug`: Provides verbose logging from Deno itself, useful for\n  diagnosing connection issues or understanding internal behavior.\n- `--strace-ops`: Prints a trace of the internal operations (Ops) between the\n  JavaScript runtime and Deno's Rust core. Useful for performance profiling or\n  debugging hangs.\n\n## Testing\n\nDeno includes a built-in test runner that works seamlessly with TypeScript and\nJavaScript. Tests ensure code reliability and functionality without requiring\nexternal dependencies. See the\n[Deno Testing Documentation](https://docs.deno.com/runtime/fundamentals/testing/)\nfor full details.\n\n**Writing Tests:**\n\nTests are defined using the `Deno.test()` function. You can define synchronous,\nasynchronous, and tests requiring specific permissions.\n\n```typescript\n// my_module.test.ts\nimport { assertEquals } from \"jsr:@std/assert\";\nimport { expect } from \"jsr:@std/expect\"; // Optional: for expect-style assertions\nimport { add } from \"./my_module.ts\"; // Assuming you have a function to test\n\n// Basic test\nDeno.test(\"add function adds two numbers correctly\", () => {\n  const result = add(2, 3);\n  assertEquals(result, 5); // Using std/assert\n  expect(result).toBe(5); // Using std/expect\n});\n\n// Async test\nDeno.test(\"async operation test\", async () => {\n  await someAsyncOperation();\n  // add assertions\n});\n\n// Test requiring permissions (must be granted at runtime)\nDeno.test({\n  name: \"read file test\",\n  permissions: { read: [\"./data.txt\"] }, // Specify required permissions\n  fn: () => {\n    const data = Deno.readTextFileSync(\"./data.txt\");\n    assertEquals(data, \"expected content\");\n  },\n});\n```\n\n**Running Tests:**\n\nUse the `deno test` command:\n\n```bash\n# Run all tests matching {*_,*.,}test.{ts, tsx, mts, js, mjs, jsx} recursively\ndeno test\n\n# Run tests in a specific directory\ndeno test src/schemas/\n\n# Run a specific test file\ndeno test src/schemas/contract.test.ts\n\n# Run tests requiring permissions\ndeno test --allow-read=./data.txt\n\n# Filter tests by name (string or /regex/)\ndeno test --filter \"add function\"\n\n# Get code coverage report\ndeno test --coverage=./cov_profile\ndeno coverage ./cov_profile --lcov --output=./cov_profile/lcov.info\n```\n\n**Testing Future Behavior:**\n\nTo define tests for features not yet implemented (Test-Driven Development\napproach):\n\n1. Write the test case for the desired future behavior.\n2. Run `deno test`. The test will fail, confirming the feature is missing.\n3. Implement the feature.\n4. Re-run `deno test` until the test passes.\n\nIf implementation is deferred, you can temporarily skip the test using\n`Deno.test.ignore` to keep the test suite green while documenting the intent:\n\n```typescript\nDeno.test.ignore(\"future feature test #123\", () => {\n  // TODO: Implement feature XYZ\n  // Assertions for the expected behavior go here\n  throw new Error(\"Test not implemented yet\");\n});\n```\n\nRemember to remove `.ignore` once the feature is implemented.\n\n**Other Features:**\n\n- **Test Steps:** Break down complex tests using `t.step()` within a `Deno.test`\n  function.\n- **Focusing Tests:** Use `Deno.test.only` to run specific tests during\n  development (remember to remove it afterward, as it causes the overall suite\n  to fail).\n- **Sanitizers:** Deno includes built-in checks for resource leaks, unhandled\n  async operations, and unwanted `Deno.exit()` calls (enabled by default).\n\n## Linting and Formatting\n\nThis project utilizes Deno's integrated tools to maintain code style consistency\nand catch potential issues:\n\n- **`deno fmt`**: An opinionated code formatter for TypeScript/JavaScript,\n  Markdown, and JSON. It automatically standardizes code style.\n- **`deno lint`**: A static analysis tool that identifies potential errors,\n  stylistic problems, and anti-patterns based on configurable rules.\n\n**Usage:**\n\nThe primary way to use these tools is through the Deno tasks defined in\n`deno.jsonc`:\n\n```bash\n# Check if all relevant files are formatted correctly\ndeno task fmt --check\n\n# Automatically format all relevant files\ndeno task fmt\n\n# Run the linter to detect issues\ndeno task lint\n```\n\nRunning `deno task fmt` and `deno task lint` regularly helps ensure code quality\nand consistency throughout the project.\n\n**Configuration:**\n\nBoth tools can be configured via the `deno.jsonc` file. This allows for\ncustomization of formatting options (e.g., line width) and lint rules (e.g.,\nenabling/disabling specific checks).\n\n```jsonc\n// Example snippet from deno.jsonc\n{\n  \"fmt\": {\n    \"options\": {\n      \"lineWidth\": 80,\n      \"indentWidth\": 2,\n      \"singleQuote\": false\n    }\n    // Include/exclude specific files if needed\n  },\n  \"lint\": {\n    \"rules\": {\n      \"tags\": [\"recommended\"],\n      \"exclude\": [\"no-explicit-any\"] // Example: customize rules\n    }\n    // Include/exclude specific files if needed\n  }\n  // ... other configurations\n}\n```\n\nFor more details, refer to the official\n[Deno Linting and Formatting Documentation](https://docs.deno.com/runtime/fundamentals/linting_and_formatting/).\n"}}},
{"type":"measure","name":"lsp.did_open","count":3,"duration":0.162},
{"type":"mark","name":"lsp.did_close","count":1,"args":{"textDocument":{"uri":"file:///Users/bobby/dev/repos/dev-contracts/tools/dev-contracts-spec/README.md"}}},
{"type":"measure","name":"lsp.did_close","count":1,"duration":0.201},
{"type":"mark","name":"lsp.did_open","count":4,"args":{"textDocument":{"uri":"file:///Users/bobby/dev/repos/dev-contracts/tools/dev-contracts-spec/README.md","languageId":"markdown","version":1,"text":"# DevContracts Spec\n\nThis project defines and validates the Zod schemas used throughout the\n`DevContracts` framework.\n\n## Overview\n\n`dev-contracts-spec` is a core component of the larger `DevContracts` project.\nIts primary responsibility _at this stage_ is to provide the canonical Zod type\ndefinitions that represent the structure and constraints of the `contracts.toml`\nspecification, drawing inspiration from well-established configuration schemas\nlike ESLint's `.eslintrc`.\n\nThink of this repository as the declarative schema specification for the core\n`DevContracts` configuration. It ensures that the types used by other tools\nwithin the framework are consistent, correct, and valid according to Zod's\nrules. While future iterations may expand the scope, the current focus is solely\non these foundational Zod types.\n\n## Purpose\n\nThe primary goals of this project _currently_ are to:\n\n1. **Define:** Provide clear, reusable Zod schemas for the `contracts.toml` data\n   structure and related artifacts.\n2. **Validate:** Ensure that these Zod schemas themselves are valid, correctly\n   defined, and pass Deno's type checking (`deno check`).\n\nThis project **does not** contain runtime logic for interacting with specific\n`contracts.toml` files or validating actual project states against a contract.\nThat functionality resides in other tools within the `DevContracts` ecosystem.\nThis project focuses strictly on the **type definitions** themselves.\n\n## Usage\n\nThe Zod schemas defined here are intended to be imported and utilized by other\ntools within the `DevContracts` framework (e.g., validation scripts, code\ngenerators, schema bridge tools) to ensure type safety and consistency when\nprocessing contract-related data.\n\n## Project Structure\n\n```\n.\n├── .gitignore\n├── deno.jsonc                 # Deno configuration (tasks, lint, fmt, check)\n├── import_map.json            # Dependency management\n├── README.md                  # This file\n├── src/\n│   ├── schemas/             # Zod schema definitions\n│   │   └── README.md        # Schema organization details/questions\n│   └── mod.ts               # Main module entrypoint\n├── examples/                  # Example data (valid/invalid)\n└── ... (test files will live alongside source files)\n```\n\n- **`deno.jsonc`**: Defines standard Deno tasks (`fmt`, `lint`, `test`,\n  `check`), compiler options, and points to the `import_map.json`.\n- **`import_map.json`**: Manages external dependencies (like Zod).\n- **`src/schemas/`**: Contains all Zod schema definitions. See the `README.md`\n  within this directory for organization details.\n- **`src/mod.ts`**: Exports the public API (the schemas) of this package.\n- **`examples/`**: Will contain example data structures that conform to (or\n  intentionally violate) the defined schemas, useful for testing and\n  documentation.\n- **Tests**: Test files (e.g., `foo.test.ts`) reside next to the source files\n  they are testing (e.g., `foo.ts`), following Deno conventions.\n\n## Development Workflow\n\nThis project emphasizes a strict, iterative development process:\n\n1. **Define/Refine Schema**: Add or modify Zod schemas in `src/schemas/`.\n2. **Add Examples**: Create corresponding valid and invalid examples in\n   `examples/`.\n3. **Write Tests**: Create/update tests (`*.test.ts`) to validate the schema\n   against the examples and cover edge cases.\n4. **Run Checks**: Use Deno tasks to ensure quality:\n   - `deno task fmt`: Format code.\n   - `deno task lint`: Lint code for potential issues.\n   - `deno task check`: Perform type checking.\n   - `deno task test`: Run all tests.\n5. **Fix & Iterate**: Address any issues found during checks or testing.\n6. **Document**: Update TSDoc comments and relevant `README.md` files.\n\nAlways aim to leave the project in a working state after each iteration.\n\n## Debugging\n\nDeno utilizes the V8 Inspector Protocol, allowing debugging with tools like\nChrome DevTools, Edge DevTools, and IDEs (VSCode, JetBrains).\n\nTo enable debugging, use one of the following flags when running a Deno script:\n\n- **`--inspect`**: Starts the Deno process with the debugger server active. The\n  script begins execution immediately. You can connect a debugger client (like\n  Chrome DevTools via `chrome://inspect`) at any time. Best for long-running\n  processes.\n  ```bash\n  deno run --inspect your_script.ts\n  ```\n- **`--inspect-wait`**: Similar to `--inspect`, but Deno waits for the debugger\n  client to connect _before_ executing any script code. Useful for debugging\n  startup logic or short scripts where you need to connect before execution\n  finishes.\n  ```bash\n  deno run --inspect-wait your_script.ts\n  ```\n- **`--inspect-brk`**: Waits for the debugger client to connect and then pauses\n  execution on the very first line of code. This is often the most useful flag\n  as it allows you to set breakpoints before any application code runs. IDEs\n  often use this by default.\n  ```bash\n  deno run --inspect-brk your_script.ts\n  ```\n\n**Connecting with Chrome DevTools:**\n\n1. Run your script with one of the `--inspect` flags (e.g.,\n   `deno run --inspect-brk main.ts`).\n2. Open Chrome or Edge and navigate to `chrome://inspect`.\n3. Your Deno process should appear under \"Remote Target\". Click \"inspect\".\n4. The DevTools will open, allowing you to set breakpoints, step through code,\n   inspect variables, etc.\n\n**IDE Integration:**\n\n- **VSCode:** Use the official `vscode_deno` extension for seamless debugging\n  integration.\n- **JetBrains IDEs (WebStorm, IntelliJ, etc.):** Use the Deno plugin. You can\n  typically right-click a file and select \"Debug 'Deno: <filename>'\".\n\n**Additional Debugging Flags:**\n\n- `--log-level=debug`: Provides verbose logging from Deno itself, useful for\n  diagnosing connection issues or understanding internal behavior.\n- `--strace-ops`: Prints a trace of the internal operations (Ops) between the\n  JavaScript runtime and Deno's Rust core. Useful for performance profiling or\n  debugging hangs.\n\n## Testing\n\nDeno includes a built-in test runner that works seamlessly with TypeScript and\nJavaScript. Tests ensure code reliability and functionality without requiring\nexternal dependencies. See the\n[Deno Testing Documentation](https://docs.deno.com/runtime/fundamentals/testing/)\nfor full details.\n\n**Writing Tests:**\n\nTests are defined using the `Deno.test()` function. You can define synchronous,\nasynchronous, and tests requiring specific permissions.\n\n```typescript\n// my_module.test.ts\nimport { assertEquals } from \"jsr:@std/assert\";\nimport { expect } from \"jsr:@std/expect\"; // Optional: for expect-style assertions\nimport { add } from \"./my_module.ts\"; // Assuming you have a function to test\n\n// Basic test\nDeno.test(\"add function adds two numbers correctly\", () => {\n  const result = add(2, 3);\n  assertEquals(result, 5); // Using std/assert\n  expect(result).toBe(5); // Using std/expect\n});\n\n// Async test\nDeno.test(\"async operation test\", async () => {\n  await someAsyncOperation();\n  // add assertions\n});\n\n// Test requiring permissions (must be granted at runtime)\nDeno.test({\n  name: \"read file test\",\n  permissions: { read: [\"./data.txt\"] }, // Specify required permissions\n  fn: () => {\n    const data = Deno.readTextFileSync(\"./data.txt\");\n    assertEquals(data, \"expected content\");\n  },\n});\n```\n\n**Running Tests:**\n\nUse the `deno test` command:\n\n```bash\n# Run all tests matching {*_,*.,}test.{ts, tsx, mts, js, mjs, jsx} recursively\ndeno test\n\n# Run tests in a specific directory\ndeno test src/schemas/\n\n# Run a specific test file\ndeno test src/schemas/contract.test.ts\n\n# Run tests requiring permissions\ndeno test --allow-read=./data.txt\n\n# Filter tests by name (string or /regex/)\ndeno test --filter \"add function\"\n\n# Get code coverage report\ndeno test --coverage=./cov_profile\ndeno coverage ./cov_profile --lcov --output=./cov_profile/lcov.info\n```\n\n**Testing Future Behavior:**\n\nTo define tests for features not yet implemented (Test-Driven Development\napproach):\n\n1. Write the test case for the desired future behavior.\n2. Run `deno test`. The test will fail, confirming the feature is missing.\n3. Implement the feature.\n4. Re-run `deno test` until the test passes.\n\nIf implementation is deferred, you can temporarily skip the test using\n`Deno.test.ignore` to keep the test suite green while documenting the intent:\n\n```typescript\nDeno.test.ignore(\"future feature test #123\", () => {\n  // TODO: Implement feature XYZ\n  // Assertions for the expected behavior go here\n  throw new Error(\"Test not implemented yet\");\n});\n```\n\nRemember to remove `.ignore` once the feature is implemented.\n\n**Other Features:**\n\n- **Test Steps:** Break down complex tests using `t.step()` within a `Deno.test`\n  function.\n- **Focusing Tests:** Use `Deno.test.only` to run specific tests during\n  development (remember to remove it afterward, as it causes the overall suite\n  to fail).\n- **Sanitizers:** Deno includes built-in checks for resource leaks, unhandled\n  async operations, and unwanted `Deno.exit()` calls (enabled by default).\n\n## Linting and Formatting\n\nThis project utilizes Deno's integrated tools to maintain code style consistency\nand catch potential issues:\n\n- **`deno fmt`**: An opinionated code formatter for TypeScript/JavaScript,\n  Markdown, and JSON. It automatically standardizes code style.\n- **`deno lint`**: A static analysis tool that identifies potential errors,\n  stylistic problems, and anti-patterns based on configurable rules.\n\n**Usage:**\n\nThe primary way to use these tools is through the Deno tasks defined in\n`deno.jsonc`:\n\n```bash\n# Check if all relevant files are formatted correctly\ndeno task fmt --check\n\n# Automatically format all relevant files\ndeno task fmt\n\n# Run the linter to detect issues\ndeno task lint\n```\n\nRunning `deno task fmt` and `deno task lint` regularly helps ensure code quality\nand consistency throughout the project.\n\n**Configuration:**\n\nBoth tools can be configured via the `deno.jsonc` file. This allows for\ncustomization of formatting options (e.g., line width) and lint rules (e.g.,\nenabling/disabling specific checks).\n\n```jsonc\n// Example snippet from deno.jsonc\n{\n  \"fmt\": {\n    \"options\": {\n      \"lineWidth\": 80,\n      \"indentWidth\": 2,\n      \"singleQuote\": false\n    }\n    // Include/exclude specific files if needed\n  },\n  \"lint\": {\n    \"rules\": {\n      \"tags\": [\"recommended\"],\n      \"exclude\": [\"no-explicit-any\"] // Example: customize rules\n    }\n    // Include/exclude specific files if needed\n  }\n  // ... other configurations\n}\n```\n\nFor more details, refer to the official\n[Deno Linting and Formatting Documentation](https://docs.deno.com/runtime/fundamentals/linting_and_formatting/).\n"}}},
{"type":"measure","name":"lsp.did_open","count":4,"duration":0.223},
{"type":"mark","name":"lsp.did_open","count":5,"args":{"textDocument":{"uri":"file:///Users/bobby/dev/repos/dev-contracts/tools/dev-contracts-spec/deno.json","languageId":"json","version":1,"text":"{\n  \"name\": \"@devcontracts/spec\",\n  \"version\": \"0.1.0\",\n  \"exports\": \"./src/mod.ts\",\n  \"license\": \"MIT\",\n  \"tasks\": {\n    \"test\": \"deno test\",\n    \"lint\": \"deno lint\",\n    \"fmt\": \"deno fmt\",\n    \"check\": \"deno check src/mod.ts\",\n    \"doc-lint\": \"deno doc --lint src/mod.ts\",\n    \"doc-preview\": \"deno doc --html src/mod.ts\",\n    \"doc-test\": \"deno test --doc\",\n    \"publish-dry-run\": \"deno publish --dry-run\"\n  },\n  \"fmt\": {\n    \"include\": [\n      \"src/\",\n      \"examples/\",\n      \"deno.json\",\n      \"import_map.json\",\n      \"README.md\"\n    ],\n    \"exclude\": [],\n    \"useTabs\": false,\n    \"lineWidth\": 80,\n    \"indentWidth\": 2,\n    \"semiColons\": true,\n    \"singleQuote\": false,\n    \"proseWrap\": \"always\"\n  },\n  \"lint\": {\n    \"include\": [\"src/\"],\n    \"exclude\": [],\n    \"rules\": {\n      \"tags\": [\"recommended\", \"jsr\"],\n      \"include\": [\n        \"explicit-function-return-type\",\n        \"no-explicit-any\",\n        \"eqeqeq\",\n        \"explicit-module-boundary-types\",\n        \"no-non-null-assertion\",\n        \"no-throw-literal\",\n        \"prefer-const\",\n        \"ban-untagged-todo\",\n        \"camelcase\",\n        \"default-param-last\",\n        \"guard-for-in\",\n        \"no-await-in-loop\",\n        \"no-boolean-literal-for-arguments\",\n        \"no-eval\",\n        \"no-inferrable-types\",\n        \"no-non-null-asserted-optional-chain\",\n        \"no-self-compare\",\n        \"no-sparse-arrays\",\n        \"no-sync-fn-in-async-fn\",\n        \"no-useless-rename\",\n        \"single-var-declarator\",\n        \"triple-slash-reference\",\n        \"no-console\",\n        \"no-debugger\",\n        \"no-top-level-await\",\n        \"no-undef\"\n      ],\n      \"exclude\": []\n    }\n  },\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true\n  },\n  \"importMap\": \"import_map.json\",\n  \"test\": {\n    \"include\": [\"src/\"],\n    \"exclude\": []\n  },\n  \"exclude\": [\n    \"docs/\"\n  ]\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":5,"duration":0.042},
{"type":"mark","name":"lsp.update_diagnostics_ts"},
TS server started.
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.did_close","count":2,"args":{"textDocument":{"uri":"file:///Users/bobby/dev/repos/dev-contracts/tools/dev-contracts-spec/deno.json"}}},
{"type":"measure","name":"lsp.did_close","count":2,"duration":0.14},
{"type":"mark","name":"lsp.did_open","count":6,"args":{"textDocument":{"uri":"file:///Users/bobby/dev/repos/dev-contracts/tools/dev-contracts-spec/deno.json","languageId":"json","version":1,"text":"{\n  \"name\": \"@devcontracts/spec\",\n  \"version\": \"0.1.0\",\n  \"exports\": \"./src/mod.ts\",\n  \"license\": \"MIT\",\n  \"tasks\": {\n    \"test\": \"deno test\",\n    \"lint\": \"deno lint\",\n    \"fmt\": \"deno fmt\",\n    \"check\": \"deno check src/mod.ts\",\n    \"doc-lint\": \"deno doc --lint src/mod.ts\",\n    \"doc-preview\": \"deno doc --html src/mod.ts\",\n    \"doc-test\": \"deno test --doc\",\n    \"publish-dry-run\": \"deno publish --dry-run\"\n  },\n  \"fmt\": {\n    \"include\": [\n      \"src/\",\n      \"examples/\",\n      \"deno.json\",\n      \"import_map.json\",\n      \"README.md\"\n    ],\n    \"exclude\": [],\n    \"useTabs\": false,\n    \"lineWidth\": 80,\n    \"indentWidth\": 2,\n    \"semiColons\": true,\n    \"singleQuote\": false,\n    \"proseWrap\": \"always\"\n  },\n  \"lint\": {\n    \"include\": [\"src/\"],\n    \"exclude\": [],\n    \"rules\": {\n      \"tags\": [\"recommended\", \"jsr\"],\n      \"include\": [\n        \"explicit-function-return-type\",\n        \"no-explicit-any\",\n        \"eqeqeq\",\n        \"explicit-module-boundary-types\",\n        \"no-non-null-assertion\",\n        \"no-throw-literal\",\n        \"prefer-const\",\n        \"ban-untagged-todo\",\n        \"camelcase\",\n        \"default-param-last\",\n        \"guard-for-in\",\n        \"no-await-in-loop\",\n        \"no-boolean-literal-for-arguments\",\n        \"no-eval\",\n        \"no-inferrable-types\",\n        \"no-non-null-asserted-optional-chain\",\n        \"no-self-compare\",\n        \"no-sparse-arrays\",\n        \"no-sync-fn-in-async-fn\",\n        \"no-useless-rename\",\n        \"single-var-declarator\",\n        \"triple-slash-reference\",\n        \"no-console\",\n        \"no-debugger\",\n        \"no-top-level-await\",\n        \"no-undef\"\n      ],\n      \"exclude\": []\n    }\n  },\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true\n  },\n  \"importMap\": \"import_map.json\",\n  \"test\": {\n    \"include\": [\"src/\"],\n    \"exclude\": []\n  },\n  \"exclude\": [\n    \"docs/\"\n  ]\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":6,"duration":0.048},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":1,"args":{"GetDiagnostics":[["file:///Users/bobby/dev/repos/dev-contracts/tools/dev-contracts-spec/src/schemas/contracts_toml.test.ts","file:///Users/bobby/dev/repos/dev-contracts/tools/dev-contracts-spec/src/schemas/contracts_toml.ts"],3]}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":1,"duration":0.263},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":1,"duration":92.382},
{"type":"measure","name":"lsp.update_diagnostics_ts","count":1,"duration":92.555},
