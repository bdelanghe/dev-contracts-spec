name: Test, Release and Publish

on:
  push:
    branches: [ main ] # Trigger on push to main
  workflow_dispatch: # Allow manual triggering

jobs:
  release-and-publish: # Renamed job for clarity
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to checkout, push tags, and create releases
      id-token: write # Needed for JSR OIDC authentication
      packages: write # Needed to publish to GitHub Packages
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to fetch all history for version calculation

      - name: Set up Deno
        uses: denoland/setup-deno@v1
        # No with: deno-version needed, defaults to latest stable

      - name: Run Tests
        run: deno test # Add your actual test command here if different

      - name: Determine Version
        id: version
        run: |
          # Fetch all tags
          git fetch --tags
          # Get latest tag like v*.*.* using version sort, or set initial version
          LATEST_TAG=$(git tag --sort=-v:refname | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$' | head -n1 || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          # Increment patch version
          IFS='.' read -r -a V_PARTS <<< "${LATEST_TAG#v}"
          MAJOR=${V_PARTS[0]}
          MINOR=${V_PARTS[1]}
          PATCH=${V_PARTS[2]}
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "New tag: $NEW_TAG"
          # Set outputs for subsequent steps
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create Tag and Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LATEST_TAG: ${{ steps.version.outputs.latest_tag }}
          NEW_TAG: ${{ steps.version.outputs.new_tag }}
        run: |
          echo "Creating tag ${NEW_TAG}"
          git tag $NEW_TAG
          git push origin $NEW_TAG
          echo "Creating release for tag ${NEW_TAG}"
          # Generate release notes automatically based on commits since the last tag
          # Handle the case where LATEST_TAG is the default v0.0.0 (first release)
          if [ "$LATEST_TAG" == "v0.0.0" ]; then
            echo "Generating release notes from the beginning of history."
            gh release create $NEW_TAG --generate-notes
          else
            echo "Generating release notes since tag ${LATEST_TAG}."
            gh release create $NEW_TAG --generate-notes --notes-start-tag $LATEST_TAG
          fi

      - name: Update deno.json version
        env:
          NEW_TAG_VAR: ${{ steps.version.outputs.new_tag }} # Pass the tag to an env var
        run: |
          echo "Updating deno.json to version $NEW_TAG_VAR"
          # Use shell parameter expansion to remove the leading 'v' for the jq argument
          VERSION_NUMBER="${NEW_TAG_VAR#v}"
          echo "Version number for jq: $VERSION_NUMBER"
          jq --arg ver "$VERSION_NUMBER" '.version = $ver' deno.json > tmp.$$.json && mv tmp.$$.json deno.json
          echo "deno.json content after update:"
          cat deno.json

      - name: Commit and Push deno.json Update
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add deno.json
          # Use the new tag for the commit message
          git commit -m "chore: Bump version to ${{ steps.version.outputs.new_tag }}"
          # Pull latest changes from main before pushing to avoid non-fast-forward errors
          git pull origin main --rebase
          git push origin main
        # The default GITHUB_TOKEN has permissions to push to the repo
        # env:
          # GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Not strictly necessary

      - name: Run JSR Publish
        run: deno task publish
        # This publish task should ideally use the NEW_TAG version
        # You might need to update deno.json or the publish script
        # to read the version from the environment or the new tag.
        env:
          PUBLISH_VERSION: ${{ steps.version.outputs.new_tag }}

# Ensure your 'deno task publish' script can use the PUBLISH_VERSION env var
# or update your deno.json(c) version before this step if necessary.
